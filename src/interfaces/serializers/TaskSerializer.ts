
import { Task, TaskStatus, TaskPriority, Category } from '../../domain/task';

export class CreateTaskSerializer {
  /**
   * Deserializes input data to create a new Task.
   * 
   * @param {Object} data - The input data for task creation.
   * @param {string} userId - The ID of the user creating the task.
   * @param {Category} category - The category of the task.
   * @returns {Task} A new Task instance.
   */
  static deserialize(data: any, userId: string, category: Category): Task {
    if (!data.title || !data.description || !data.dueDate) {
      throw new Error('Title, description, and due date are required');
    }

    return new Task(
      "", // id will be generated by the system
      data.title,
      data.description,
      TaskStatus.TODO, // default status for new tasks
      data.priority || TaskPriority.MEDIUM,
      new Date(data.dueDate),
      userId,
      category,
      new Date(), // createdAt
      new Date()  // updatedAt
    );
  }
}

export class UpdateTaskSerializer {
  /**
   * Deserializes input data to update an existing Task.
   * 
   * @param {Task} task - The existing Task to update.
   * @param {Object} data - The input data for task update.
   * @param {Category} category - The new category of the task (if provided).
   * @returns {Task} The updated Task instance.
   */
  static deserialize(task: Task, data: any, category?: Category): Task {
    if (data.title !== undefined) task.setTitle(data.title);
    if (data.description !== undefined) task.setDescription(data.description);
    if (data.status !== undefined) task.setStatus(data.status as TaskStatus);
    if (data.priority !== undefined) task.setPriority(data.priority as TaskPriority);
    if (data.dueDate !== undefined) task.setDueDate(new Date(data.dueDate));
    if (category !== undefined) task.setCategory(category);

    return task;
  }
}

export class TaskResponseSerializer {
  /**
   * Serializes a Task for API responses.
   * 
   * @param {Task} task - The Task to serialize.
   * @returns {Object} Serialized task data.
   */
  static serialize(task: Task): Object {
    return {
      id: task.getId(),
      title: task.getTitle(),
      description: task.getDescription(),
      status: task.getStatus(),
      priority: task.getPriority(),
      dueDate: task.getDueDate().toISOString(),
      category: {
        name: task.getCategory().getName(),
        description: task.getCategory().getDescription(),
      },
      createdAt: task.getCreatedAt().toISOString(),
      updatedAt: task.getUpdatedAt().toISOString(),
    };
  }

  /**
   * Serializes an array of Tasks for API responses.
   * 
   * @param {Task[]} tasks - The array of Tasks to serialize.
   * @returns {Object[]} Array of serialized task data.
   */
  static serializeMany(tasks: Task[]): Object[] {
    return tasks.map(task => this.serialize(task));
  }
}

export class TaskListItemSerializer {
  /**
   * Serializes a Task for list view responses.
   * 
   * @param {Task} task - The Task to serialize.
   * @returns {Object} Serialized task data for list view.
   */
  static serialize(task: Task): Object {
    return {
      id: task.getId(),
      title: task.getTitle(),
      status: task.getStatus(),
      priority: task.getPriority(),
      dueDate: task.getDueDate().toISOString(),
      categoryName: task.getCategory().getName(),
    };
  }

  /**
   * Serializes an array of Tasks for list view responses.
   * 
   * @param {Task[]} tasks - The array of Tasks to serialize.
   * @returns {Object[]} Array of serialized task data for list view.
   */
  static serializeMany(tasks: Task[]): Object[] {
    return tasks.map(task => this.serialize(task));
  }
}